ASSIGNMENT NO: -4 .B

/* Problem Statement: Thread synchronization and mutual exclusion using mutex. Application to demonstrate:
Reader-Writer problem with reader priority. */
#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>
#include<stdlib.h>
#include<unistd.h>
pthread_mutex_t mutex,writeblock;
int data = 0,rcount = 0;
void *reader(void *arg)
{
    int waittime;
    waittime = rand() % 5;
  printf("\nReader is trying to enter");
// Reader wants to enter the critical section  
pthread_mutex_lock(&mutex);
// The number of readers has now increased by 1  
rcount = rcount + 1;
// there is atleast one reader in the critical section
// this ensure no writer can enter if there is even one reader
// thus we give preference to readers here  
if(rcount==1)
   pthread_mutex_lock(&writeblock); 
// other readers can enter while this current reader is inside // the critical section  
pthread_mutex_unlock(&mutex);
// current reader performs reading here
printf("\n Reader %d is inside ",rcount);
  printf("\nData read by the reader%d is %d\n",rcount,data);
  sleep(waittime);
pthread_mutex_lock(&mutex);
// a reader wants to leave  
rcount = rcount - 1;
 // that is, no reader is left in the critical section, 
 if(rcount==0)
   pthread_mutex_unlock(&writeblock); //writer can enter
  pthread_mutex_unlock(&mutex);   // reader leaves
 printf("\nReader is Leaving");
}
void *writer(void *arg)
{
  int waittime;
    waittime=rand() % 3;
  printf("\nWriter is trying to enter");
// writer requests for critical section
  pthread_mutex_lock(&writeblock);   
// performs the write
data++;
  printf("\nData writen by the writer is %d\n",data);
  sleep(waittime);
// leaves the critical section  
  pthread_mutex_unlock(&writeblock);
  printf("\nWriter is leaving");
sleep(30);
}
int main()
{
  int i,b; 
    pthread_mutex_init(&mutex,NULL);
    pthread_mutex_init(&writeblock,NULL);
  pthread_t rtid[5],wtid[5];
  for(i=0;i<=2;i++)
  {
    pthread_create(&wtid[i],NULL,writer,NULL);
    pthread_create(&rtid[i],NULL,reader,NULL);
  }
  for(i=0;i<=2;i++)
  {
    pthread_join(wtid[i],NULL);
    pthread_join(rtid[i],NULL);}
}
